using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.Pool;
using SNCore;
using UnityEngine.SceneManagement;


public class SSGameShipManager : MonoBehaviour
{

    #region SINGLETON

    public static SSGameShipManager GameShipManagerInstance { get; private set; }

    public void Awake() //Singleton
    {
        if (GameShipManagerInstance == null)
        {
            GameShipManagerInstance = this;
        }
        else
        {
            if (GameShipManagerInstance != this)
            {
                Destroy(gameObject);
            }
        }

        DontDestroyOnLoad(gameObject);
    }

    [SerializeField] SSDataManager dataManagerInstance;

    public SSDataManager DataManagerInstance
    {
        get { return dataManagerInstance; }
        set { dataManagerInstance = value; }
    }

    #endregion SINGLETON

    #region INSPECTOR VARIABLES

    /* --------------------  GSM ACTIVE SHIP  --------------------- */
    /*   First dynamic GameObject generated by Game + Player Data.   */
    /*   Instantiated in DataManager but cached here.                */

    [SerializeField] SOShip gsmActiveShipSO; //SOShip still gets instantiated in the DataManager, but is cached here as a clone of that instance
    [SerializeField] GameObject gsmActiveShipGO;
    [SerializeField] SXShip gsmActiveShipSX;
    [SerializeField] SXActiveShipContainer gsmActiveShipParent;  //Active Ship Spawn location
    [Space]
    [Space]
    [SerializeField] LOShipCardSlot gsmActiveShipSlot; //Reference to Active Ship fittings
    [SerializeField] Transform gsmActiveSlotParent;
    [Space]
    [SerializeField] SUInventoryPanel gsmInventoryPanel;
    [SerializeField] SUFittingPanel gsmFittingPanel;
    [SerializeField] SUStationManager gsmStationManager;
    [SerializeField] GameObject shipCardSlotPrefab;


    /* ----- ACCESSORS ----- */

    public SOShip GSMActiveShipSO
    {
        get { return gsmActiveShipSO; }
        set { gsmActiveShipSO = value; }
    }
    public GameObject GSMActiveShipGO { get { return gsmActiveShipGO; } }
    public SXActiveShipContainer GSMActiveShipParent { get { return gsmActiveShipParent; } set { gsmActiveShipParent = value; } }
    public LOShipCardSlot GSMActiveShipSlot { get { return gsmActiveShipSlot; } }
    public SUFittingPanel GSMFittingPanel { get { return gsmFittingPanel; } set { gsmFittingPanel = value; } }
    public SUInventoryPanel GSMInventoryPanel { get { return gsmInventoryPanel; } set { gsmInventoryPanel = value; } }
    public SUStationManager GSMStationManager { get { return gsmStationManager; } set { gsmStationManager = value; } }

    #endregion INSPECTOR VARIABLES


    #region SESSION INITIALIZATION

    private void Start()
    {
        if (!dataManagerInstance)
            dataManagerInstance = SSDataManager.DataManagerInstance;

        if (!dataManagerInstance.GameShipManagerInstance)
        {
            dataManagerInstance.GameShipManagerInstance = this;
        }


        //VerifySceneInfo();
    }


    //public void VerifySceneInfo()
    //{
    //    Scene scene = SceneManager.GetActiveScene();
    //    int sceneInt = scene.buildIndex;
    //    Debug.Log(sceneInt);

    //    if (sceneInt == 1 || dataManagerInstance.IsTesting == true)
    //    {
    //        LoadStationUIComponents();
    //    }

    //    else
    //    {
    //        //Initialize UI elements for Space
    //    }
    //}
    //public void LoadStationUIComponents()
    //{
    //    gsmActiveShipParent = FindObjectOfType<SXActiveShipContainer>();
    //    SetActiveShipSlot();
    //    //LoadInventoryPanel();
    //    //LoadFittingPanel();
    //    //inventoryPanel.AddEventListeners();
    //    //LoadActiveShipPrefab();

    //}
    //public void LoadActiveShipPrefab()
    //{
    //    for (int i = 0; i < dataManagerInstance.PlayerShipSOs.Count; i++)
    //    {
    //        if (dataManagerInstance.PlayerShipSOs[i].ItemCurrentSlot == SECurrentSlot.ActiveShip)
    //        {
    //            activeShipSO = dataManagerInstance.PlayerShipSOs[i];
    //            GameObject shipPrefab;
    //            shipPrefab = Instantiate(dataManagerInstance.PlayerShipSOs[i].itemPrefab, activeShipContainer.transform);
    //            shipPrefab.transform.localRotation = Quaternion.Euler(new Vector3(0f, 0f, 0f));
    //            shipPrefab.transform.localPosition = new Vector3(0f, 0f, 0f);
    //            SXPlayerShip activePlayerShip = shipPrefab.GetComponent<SXPlayerShip>();

    //            if (CheckCurrentScene() == 1 || dataManagerInstance.IsTesting == true)
    //            {
    //                activePlayerShip.IsDocked = true;
    //            }
    //            else
    //                activePlayerShip.IsDocked = false;


    //            shipLoadOutInstance.playerShipSO = activeShipSO;
    //            shipLoadOutInstance.playerShip = activePlayerShip;
    //        }
    //    }
    //}

    //public void LoadInventoryPanel()
    //{
    //    inventoryPanel.DataInstance = dataManagerInstance;
    //    inventoryPanel.AddEventListeners();
    //    inventoryPanel.SetPlayerModuleSlots();
    //}

    //public void LoadFittingPanel()
    //{
    //    shipLoadOutInstance.InitializeStationShipLoadOut();


    //}

    public void InitializeActiveShipFromDataManager(SOShip ship)
    {
        if (!gsmActiveShipSO)
            gsmActiveShipSO = ship;

        if (gsmActiveShipSlot.ShipLoadOutGO)
            Destroy(gsmActiveShipSlot.ShipLoadOutGO); //This shouldn't matter.  It shouldn't ever store one, and I'm not sure that it matters if it does.

        gsmActiveShipGO = InstantiateGO(ship.itemPrefab, gsmActiveShipParent.transform);
        gsmActiveShipSX = gsmActiveShipGO.GetComponent<SXShip>();

        gsmActiveShipSlot.ShipLoadOutGO = InstantiateGO(ship.ShipLoadCard, gsmActiveSlotParent);
        gsmActiveShipSlot.ActiveShipLO = gsmActiveShipSlot.ShipLoadOutGO.GetComponent<LOShipCard>();
    }



    public void InitializeStationShipLoadOut()
    {
        InitializeLoadOutSlots();
    }

    public void InitializeCombatShipLoadOut()
    {

    }

    public void InitializeLoadOutSlots()
    {
        //for(int i = 0; i < loadOutSlots.Length; i++)
        //{
        //    loadOutSlots[i].LoadFitSlotRef = stationUIFitPanel.fittingSlots[i];
        //}
    }

    #endregion SESSION INITIALIZATION

    public GameObject InstantiateGO(GameObject newGO, Transform parent)
    {
        GameObject tempGO = Instantiate(newGO, parent);
        tempGO.transform.localRotation = Quaternion.Euler(new Vector3(0f, 0f, 0f));
        tempGO.transform.localPosition = new Vector3(0f, 0f, 0f);
        return tempGO;
    }

    public void SetActiveShipSlot()
    {
        for (int i = 0; i < dataManagerInstance.PlayerShipSOs.Count; i++)
        {
            if (dataManagerInstance.PlayerShipSOs[i].ItemCurrentSlot == SECurrentSlot.ActiveShip)
            {
                gsmActiveShipSO = dataManagerInstance.PlayerShipSOs[i];
                gsmActiveShipSlot.ShipLoadOutGO = InstantiateGO(gsmActiveShipSO.ShipLoadCard, gsmActiveSlotParent);
                gsmActiveShipSlot.ActiveShipLO = gsmActiveShipSlot.ShipLoadOutGO.GetComponent<LOShipCard>();
                gsmActiveShipSlot.ActiveShipLO.PlayerShipCardSO = gsmActiveShipSO;
                gsmActiveShipGO = InstantiateGO(gsmActiveShipSO.itemPrefab, GSMActiveShipParent.transform);
                gsmActiveShipSX = GSMActiveShipGO.GetComponent<SXShip>();
            }
            else
                Debug.Log("nothing");
        }
    }

    public void AddModuleToShip(SOModule module, SUFittingSlot fitSlot)
    {
        for(int i = 0; i < gsmActiveShipSlot.ActiveShipLO.ShipFittingLOs.Length; i++)
        {
            if (gsmActiveShipSlot.ActiveShipLO.ShipFittingLOs[i].ActiveHardLocation == fitSlot.FittingPointLocation)
            {
                gsmActiveShipSlot.ActiveShipLO.PlayerShipCardSX = gsmActiveShipSX;
                gsmActiveShipSlot.ActiveShipLO.ShipFittingLOs[i].ActiveFittingSO = module;
                gsmActiveShipSlot.ActiveShipLO.ShipFittingLOs[i].LoadFitSlotRef = fitSlot;
                gsmActiveShipSlot.ActiveShipLO.ShipFittingLOs[i].LoadOutHardSlotRef = gsmActiveShipSX.moduleHardPoints[i];
                //gsmActiveShipSlot.ActiveShipLO.ShipFittingLOs[i].ActiveHardLocation = fitSlot.FittingPointLocation;

                if(module.itemPrefab != null) 
                {
                    gsmActiveShipSX.moduleHardPoints[i].InitializeMount(gsmActiveShipSX, module);

                    //foreach(SXMount moduleMount in gsmActiveShipSX.moduleHardPoints[i].Mounts)
                    //{
                    //    gsmActiveShipSX.moduleHardPoints[i].InitializeMount(gsmActiveShipSX, module);
                    //}
                }
            }
        }
    }

    public void RemoveModuleFromShip(SOModule module, SUFittingSlot fitSlot)
    {
        for (int i = 0; i < gsmActiveShipSlot.ActiveShipLO.ShipFittingLOs.Length; i++)
        {
            if (gsmActiveShipSlot.ActiveShipLO.ShipFittingLOs[i].ActiveHardLocation == fitSlot.FittingPointLocation)
            {
                
                //gsmActiveShipSlot.ActiveShipLO.ShipFittingLOs[i].ActiveHardLocation = fitSlot.FittingPointLocation;
                if (module.itemPrefab != null)
                {
                    gsmActiveShipSX.moduleHardPoints[i].UnloadMount(gsmActiveShipSX, module);

                    //foreach (SXMount moduleMount in gsmActiveShipSX.moduleHardPoints[i].Mounts)
                    //{
                    //    gsmActiveShipSX.moduleHardPoints[i].InitializeMount(gsmActiveShipSX, module);

                    //}
                }

                gsmActiveShipSlot.ActiveShipLO.PlayerShipCardSX = null;
                gsmActiveShipSlot.ActiveShipLO.ShipFittingLOs[i].ActiveFittingSO = null;
                gsmActiveShipSlot.ActiveShipLO.ShipFittingLOs[i].LoadFitSlotRef = null;
                gsmActiveShipSlot.ActiveShipLO.ShipFittingLOs[i].LoadOutHardSlotRef = null;
            }
        }
    }



    

    public void UndockShip()
    {

    }
}







